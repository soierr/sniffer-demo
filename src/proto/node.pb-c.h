/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/node.proto */

#ifndef PROTOBUF_C_proto_2fnode_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fnode_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Node Node;
typedef struct _TreeArrayed TreeArrayed;


/* --- enums --- */


/* --- messages --- */

struct  _Node
{
  ProtobufCMessage base;
  int32_t ip;
  int32_t count;
};
#define NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node__descriptor) \
    , 0, 0 }


struct  _TreeArrayed
{
  ProtobufCMessage base;
  int32_t length;
  size_t n_nodes;
  Node **nodes;
};
#define TREE_ARRAYED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tree_arrayed__descriptor) \
    , 0, 0,NULL }


/* Node methods */
void   node__init
                     (Node         *message);
size_t node__get_packed_size
                     (const Node   *message);
size_t node__pack
                     (const Node   *message,
                      uint8_t             *out);
size_t node__pack_to_buffer
                     (const Node   *message,
                      ProtobufCBuffer     *buffer);
Node *
       node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node__free_unpacked
                     (Node *message,
                      ProtobufCAllocator *allocator);
/* TreeArrayed methods */
void   tree_arrayed__init
                     (TreeArrayed         *message);
size_t tree_arrayed__get_packed_size
                     (const TreeArrayed   *message);
size_t tree_arrayed__pack
                     (const TreeArrayed   *message,
                      uint8_t             *out);
size_t tree_arrayed__pack_to_buffer
                     (const TreeArrayed   *message,
                      ProtobufCBuffer     *buffer);
TreeArrayed *
       tree_arrayed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tree_arrayed__free_unpacked
                     (TreeArrayed *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Node_Closure)
                 (const Node *message,
                  void *closure_data);
typedef void (*TreeArrayed_Closure)
                 (const TreeArrayed *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor node__descriptor;
extern const ProtobufCMessageDescriptor tree_arrayed__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fnode_2eproto__INCLUDED */
